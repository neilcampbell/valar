{
    "name": "Noticeboard",
    "structs": {
        "ContractDeleteReturn": [
            {
                "name": "remaining_balance",
                "type": "uint64"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            }
        ],
        "EarningsDistribution": [
            {
                "name": "user",
                "type": "uint64"
            },
            {
                "name": "platform",
                "type": "uint64"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            }
        ],
        "KeyRegTxnInfo": [
            {
                "name": "vote_first",
                "type": "uint64"
            },
            {
                "name": "vote_last",
                "type": "uint64"
            },
            {
                "name": "vote_key_dilution",
                "type": "uint64"
            },
            {
                "name": "vote_pk",
                "type": "byte[32]"
            },
            {
                "name": "selection_pk",
                "type": "byte[32]"
            },
            {
                "name": "state_proof_pk",
                "type": "byte[64]"
            },
            {
                "name": "sender",
                "type": "address"
            }
        ],
        "NoticeboardAssetInfo": [
            {
                "name": "accepted",
                "type": "bool"
            },
            {
                "name": "fee_round_min_min",
                "type": "uint64"
            },
            {
                "name": "fee_round_var_min",
                "type": "uint64"
            },
            {
                "name": "fee_setup_min",
                "type": "uint64"
            }
        ],
        "NoticeboardFees": [
            {
                "name": "commission_min",
                "type": "uint64"
            },
            {
                "name": "val_user_reg",
                "type": "uint64"
            },
            {
                "name": "del_user_reg",
                "type": "uint64"
            },
            {
                "name": "val_ad_creation",
                "type": "uint64"
            },
            {
                "name": "del_contract_creation",
                "type": "uint64"
            }
        ],
        "NoticeboardTermsNodeLimits": [
            {
                "name": "stake_max_max",
                "type": "uint64"
            },
            {
                "name": "stake_max_min",
                "type": "uint64"
            },
            {
                "name": "cnt_del_max_max",
                "type": "uint64"
            }
        ],
        "NoticeboardTermsTiming": [
            {
                "name": "rounds_duration_min_min",
                "type": "uint64"
            },
            {
                "name": "rounds_duration_max_max",
                "type": "uint64"
            },
            {
                "name": "before_expiry",
                "type": "uint64"
            },
            {
                "name": "report_period",
                "type": "uint64"
            }
        ],
        "PartnerCommissions": [
            {
                "name": "commission_setup",
                "type": "uint64"
            },
            {
                "name": "commission_operational",
                "type": "uint64"
            }
        ],
        "UserInfo": [
            {
                "name": "role",
                "type": "byte[4]"
            },
            {
                "name": "dll_name",
                "type": "byte[8]"
            },
            {
                "name": "prev_user",
                "type": "address"
            },
            {
                "name": "next_user",
                "type": "address"
            },
            {
                "name": "app_ids",
                "type": "uint64[110]"
            },
            {
                "name": "cnt_app_ids",
                "type": "uint64"
            }
        ],
        "UsersDoubleLinkedList": [
            {
                "name": "cnt_users",
                "type": "uint64"
            },
            {
                "name": "user_first",
                "type": "address"
            },
            {
                "name": "user_last",
                "type": "address"
            }
        ],
        "ValidatorSelfDisclosure": [
            {
                "name": "name",
                "type": "byte[30]"
            },
            {
                "name": "https",
                "type": "byte[60]"
            },
            {
                "name": "country_code",
                "type": "byte[2]"
            },
            {
                "name": "hw_cat",
                "type": "uint64"
            },
            {
                "name": "node_version",
                "type": "byte[20]"
            }
        ],
        "ValidatorTermsGating": [
            {
                "name": "gating_asa_list",
                "type": "(uint64,uint64)[2]"
            }
        ],
        "ValidatorTermsPricing": [
            {
                "name": "commission",
                "type": "uint64"
            },
            {
                "name": "fee_round_min",
                "type": "uint64"
            },
            {
                "name": "fee_round_var",
                "type": "uint64"
            },
            {
                "name": "fee_setup",
                "type": "uint64"
            },
            {
                "name": "fee_asset_id",
                "type": "uint64"
            }
        ],
        "ValidatorTermsStakeLimits": [
            {
                "name": "stake_max",
                "type": "uint64"
            },
            {
                "name": "stake_gratis",
                "type": "uint64"
            }
        ],
        "ValidatorTermsTiming": [
            {
                "name": "rounds_setup",
                "type": "uint64"
            },
            {
                "name": "rounds_confirm",
                "type": "uint64"
            },
            {
                "name": "rounds_duration_min",
                "type": "uint64"
            },
            {
                "name": "rounds_duration_max",
                "type": "uint64"
            },
            {
                "name": "round_max_end",
                "type": "uint64"
            }
        ],
        "ValidatorTermsWarnings": [
            {
                "name": "cnt_warning_max",
                "type": "uint64"
            },
            {
                "name": "rounds_warning",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "noticeboard_deploy",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_id_old",
                    "desc": "The app ID of previous version of the platform."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "App ID of the created noticeboard application."
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Creates a new Noticeboard.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_suspend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Suspends the platform, temporarily preventing creation of new validator ads and modification of existing ones,\nas well as creation of new delegation contracts and registration of new users.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_migrate",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_id_new",
                    "desc": "The app ID of next version of the platform."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retires the current platform, permanently preventing creation of new validator ads and modification of existing\nones, as well as creation of new delegation contracts and registration of new users. Since retired platform cannot create new validator ads or modify existing ones, configuring payment assets and partners is not needed anymore.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_set",
            "args": [
                {
                    "type": "account",
                    "name": "pla_manager",
                    "desc": "Platform manager account."
                },
                {
                    "type": "account",
                    "name": "asset_config_manager",
                    "desc": "Manager account that can configure assets supported by the noticeboard."
                },
                {
                    "type": "byte[32]",
                    "name": "tc_sha256",
                    "desc": "Hash (i.e. SHA 256) of the Terms and Conditions."
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64)",
                    "struct": "NoticeboardFees",
                    "name": "noticeboard_fees",
                    "desc": "Fees charged by the noticeboard."
                },
                {
                    "type": "(uint64,uint64,uint64,uint64)",
                    "struct": "NoticeboardTermsTiming",
                    "name": "noticeboard_terms_timing",
                    "desc": "Noticeboard limits on timing terms for validator ads."
                },
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "NoticeboardTermsNodeLimits",
                    "name": "noticeboard_terms_node",
                    "desc": "Noticeboard limits on node and related stake limit terms for validator ads."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set (anew) all of the platform's operating parameters.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_key_reg",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                    "struct": "KeyRegTxnInfo",
                    "name": "key_reg_info",
                    "desc": "Key registration information to send."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Payment transaction to cover costs for the key (de)registration fee."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Issues a key (de)registration transaction by the platform.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_optin_asa",
            "args": [
                {
                    "type": "asset",
                    "name": "asa",
                    "desc": "Asset to opt into."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Payment transaction to cover MBR increase."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opts the platform address in to an ASA.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_config_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id",
                    "desc": "ID of asset to add or modify as an accepted payment method, i.e. ASA ID or 0 for ALGO."
                },
                {
                    "type": "(bool,uint64,uint64,uint64)",
                    "struct": "NoticeboardAssetInfo",
                    "name": "asset_info",
                    "desc": "Information about the payment asset, i.e. if it is accepted as a payment at the platform (True) or not (False), and its minimum pricing limits."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Payment transaction to cover (potential) MBR increase."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Adds or modifies an asset from the accepted payment methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noticeboard_income",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id",
                    "desc": "ID of asset to withdraw all earnings."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sends all platform earnings of asset to platform manager account.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "template_load_init",
            "args": [
                {
                    "type": "byte",
                    "name": "name",
                    "desc": "Name of the box with the contract template."
                },
                {
                    "type": "uint64",
                    "name": "template_size",
                    "desc": "Size of the delegator contract template in bytes."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts the process of uploading a contract template.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "template_load_data",
            "args": [
                {
                    "type": "byte",
                    "name": "name",
                    "desc": "Name of the box with the contract template."
                },
                {
                    "type": "uint64",
                    "name": "offset",
                    "desc": "Offset in the box at which to replace the data."
                },
                {
                    "type": "byte[]",
                    "name": "data",
                    "desc": "Data to replace in the box at the defined position."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Uploads a data chunk to a contract template.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "partner_config",
            "args": [
                {
                    "type": "address",
                    "name": "partner_address",
                    "desc": "Address of the partner to register on the platform."
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "PartnerCommissions",
                    "name": "partner_commissions",
                    "desc": "Information about platform's partner commissions."
                },
                {
                    "type": "bool",
                    "name": "partner_delete",
                    "desc": "Boolean set to true to delete the partner from the platform, otherwise create or modify it."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Payment transaction to cover (potential) MBR increase."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates or modifies a platform's partner.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "To fit more resources in app reference arrays.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "user_create",
            "args": [
                {
                    "type": "byte[4]",
                    "name": "user_role",
                    "desc": "Role to requested by the user. Possible options:     ROLE_VAL - user is a validator.     ROLE_DEL - user is a delegator."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Payment transaction to cover MBR increase and user creation fee."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new user data structure for the sender depending on the requested user role.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "user_delete",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Clears the user's existing role on noticeboard.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_create",
            "args": [
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index in the validator owner app list at which to place the newly created validator ad. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Transaction for the payment of the validator ad creation fee and all the MBR increases at Noticeboard and the newly created ValidatorAd."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "App ID of the created validator ad application."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new validator ad for the sender (i.e. validator owner).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_config",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_manager",
                    "desc": "Manager address for the validator ad."
                },
                {
                    "type": "bool",
                    "name": "live",
                    "desc": "Set to True if the newly created validator ad should be accepting new delegators right away, otherwise set to False."
                },
                {
                    "type": "uint64",
                    "name": "cnt_del_max",
                    "desc": "Maximum number of delegators the validator is willing to manage simultaneously."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets all operation configuration parameters for the validator ad, i.e.\nthe validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validator ad can accept.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_delete",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Validator owner deletes a validator ad.\nPossible only if there are no active delegators and all balances have been claimed.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_ready",
            "args": [
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "bool",
                    "name": "ready",
                    "desc": "Set to True if validator manager is ready for accepting new delegators, otherwise set to False."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Ad manager sets its readiness for operation.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_self_disclose",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "(byte[30],byte[60],byte[2],uint64,byte[20])",
                    "struct": "ValidatorSelfDisclosure",
                    "name": "val_info",
                    "desc": "Self-disclosed information about the validator."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Ad owner sets its self-disclosure information.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_terms",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "byte[32]",
                    "name": "tc_sha256",
                    "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator."
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64)",
                    "struct": "ValidatorTermsTiming",
                    "name": "terms_time",
                    "desc": "Validator's terms about timing."
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64)",
                    "struct": "ValidatorTermsPricing",
                    "name": "terms_price",
                    "desc": "Validator's terms about pricing."
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "ValidatorTermsStakeLimits",
                    "name": "terms_stake",
                    "desc": "Validator's terms about stake limits."
                },
                {
                    "type": "((uint64,uint64)[2])",
                    "struct": "ValidatorTermsGating",
                    "name": "terms_reqs",
                    "desc": "Validator's terms about gating requirements."
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "ValidatorTermsWarnings",
                    "name": "terms_warn",
                    "desc": "Validator's terms about warnings."
                },
                {
                    "type": "uint64",
                    "name": "mbr_delegator_template_box",
                    "desc": "Amount needed to pay to the validator ad for creating box for delegator template."
                },
                {
                    "type": "pay",
                    "name": "txn",
                    "desc": "Transaction for the payment of potential MBR increase of ValidatorAd in case of ASA opt-in and payment of box for delegator contract template box in case the ValidatorAd is in STATE_CREATED."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets all the terms for creating a delegation contract.\nWith this action, the validator agrees with the (new) terms.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_income",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "uint64",
                    "name": "asset_id",
                    "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Withdrawn income from the validator ad for the input asset."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Validator owner withdraws all available balance from the validator ad for the given asset.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ad_asa_close",
            "args": [
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "uint64",
                    "name": "asset_id",
                    "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Removes the asset's storage on the validator ad.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_create",
            "args": [
                {
                    "type": "address",
                    "name": "del_beneficiary",
                    "desc": "Beneficiary address for the new delegation contract."
                },
                {
                    "type": "uint64",
                    "name": "rounds_duration",
                    "desc": "Contract duration in number of rounds."
                },
                {
                    "type": "uint64",
                    "name": "stake_max",
                    "desc": "The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which to store the new delegator contract. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "byte[32]",
                    "name": "tc_sha256",
                    "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the delegator."
                },
                {
                    "type": "address",
                    "name": "partner_address",
                    "desc": "Address of the partner that facilitated the contract creation. If there is no partner, set to Global.zero_address."
                },
                {
                    "type": "pay",
                    "name": "mbr_txn",
                    "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract and payment of delegator contract creation fee."
                },
                {
                    "type": "txn",
                    "name": "txn",
                    "desc": "Transaction for the payment of the setup and operational fee."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "App ID of the created delegator contract application."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new delegator contract for a delegator beneficiary with the given validator owner under the terms\ndefined in the given ad for the input defined contract duration.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_confirm",
            "args": [
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_not_confirmed",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Anyone confirms that delegator manager has not confirmed the confirmation of\nthe keys by the delegator beneficiary and failed to pay the operational fee in the agreed time.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_not_submitted",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Anyone confirms that validator manager has not submitted the keys in the agreed time.\nInternally, the setup fee is returned to the delegator manager if possible.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_submit",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                    "struct": "KeyRegTxnInfo",
                    "name": "key_reg_txn_info",
                    "desc": "Information about the generated participation keys."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Validator manager submits the keys generated for the delegator beneficiary.\nInternally, the setup fee is assigned to the validator.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_limits",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a limit breach event occurred on a delegator contract of a validator ad.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_pay",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a payment cannot be made because the payment asset on a delegator contract\nhave been either frozen or clawed back.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_suspended",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that the delegator beneficiary was suspended by consensus.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_claim",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "EarningsDistribution"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claims the operational fee up to this round from a delegator contract and\ntransfers it to the validator ad as well as the commission to the platform.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_expired",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a delegator contract has expired.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_withdraw",
            "args": [
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delegator manager gracefully withdraws from the delegator contract prematurely.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_delete",
            "args": [
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "ContractDeleteReturn",
                "desc": "Balance of the fee asset that remained in the delegator contract."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes a delegator contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_report_expiry_soon",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "application",
                    "name": "del_app",
                    "desc": "App ID of the delegator contract."
                },
                {
                    "type": "uint64",
                    "name": "del_app_idx",
                    "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                },
                {
                    "type": "address",
                    "name": "val_owner",
                    "desc": "Owner address for the validator ad."
                },
                {
                    "type": "application",
                    "name": "val_app",
                    "desc": "App ID of the validator ad."
                },
                {
                    "type": "uint64",
                    "name": "val_app_idx",
                    "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that the contract will expire soon.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_noticeboard_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                }
            ],
            "returns": {
                "type": "(bool,uint64,uint64,uint64)",
                "struct": "NoticeboardAssetInfo",
                "desc": "Information about the payment asset that is or was accepted on the platform."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns information about the payment asset that is or was accepted on the platform.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_noticeboard_user",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(byte[4],byte[8],address,address,uint64[110],uint64)",
                "struct": "UserInfo",
                "desc": "Information about the user on the platform."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns information about the user on the platform.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Platform for peer-to-peer consensus delegation.\n    Validators, i.e. node runners/operators, can post ads to offer their services to users.\n    Delegators, i.e. users/ALGO holders, can open requests for the service and conclude a contract with a validator.\n\n    Global state\n    ------------\n\n    pla_manager : Account\n        Platform manager account.\n    asset_config_manager : Account\n        Manager account that can configure assets supported by the noticeboard.\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions.\n\n    noticeboard_fees : NoticeboardFees\n        Fees charged by the noticeboard.\n    noticeboard_terms_timing : NoticeboardTermsTiming\n        Noticeboard limits on timing terms for validator ads.\n    noticeboard_terms_node : NoticeboardTermsNodeLimits\n        Noticeboard limits on node and related stake limit terms for validator ads.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            DEPLOYED - noticeboard contract has been deployed.\n            SET - noticeboard has been set.\n            RETIRED - noticeboard has been retired. Operations no new ads or contracts can be opened.\n\n    app_id_old : UInt64\n        The app ID of previous version of the platform.\n    app_id_new : UInt64\n        The app ID of next version of the platform.\n\n    dll_val :  UsersDoubleLinkedList\n        Information about the double linked list of validator users.\n    dll_del :  UsersDoubleLinkedList\n        Information about the double linked list of delegator users.\n\n    Box storage\n    -----------\n    assets : asset_[asset_id] = NoticeboardAssetInfo\n        Box map for storing assets that are or were supported by the noticeboard at any point of time as a means of\n        payment between validators and delegators.\n        Each entry is a NoticeboardAssetInfo, which is struct with fields:\n            - a boolean marking whether the asset is currently accepted as payment (True) or not (False).\n            - minimum pricing parameters for this asset.\n        Keys correspond to \"asset_\" followed by byte representation of ASA ID or 0 for ALGO.\n        Once an entry is created, it cannot be deleted.\n\n    user : [arc4.Address] = UserInfo\n        Box map for storing data about validator owner or delegator manager user.\n        Each entry is a UserInfo, with fields for user role, list of app IDs and its counter, as well as\n        the previous and next user of the same role in the linked list.\n        Keys correspond to user address (32 Byte).\n\n    template_del : BOX_DELEGATOR_CONTRACT_TEMPLATE_KEY = Byte\n        Box for storing the delegator contract template.\n\n    template_val : BOX_VALIDATOR_AD_TEMPLATE_KEY = Byte\n        Box for storing the validator ad template.\n\n    partner : partner_[arc4.Address] = PartnerCommissions\n        Box map for storing commissions of a partner of the platform.\n        Each entry is a PartnerCommissions, which includes two UInt64 with the partners commission in ppm\n        charged on top of setup and operational fees.\n        Keys correspond to \"partner_\" followed by partners address.\n\n    Methods\n    -------\n    noticeboard_deploy(\n        app_id_old: UInt64,\n    ) -> arc4.UInt64:\n        Creates a new Noticeboard.\n\n    noticeboard_suspend(\n    ) -> None:\n        Suspends the platform, temporarily preventing creation of new validator ads and modification of existing ones,\n        as well as creation of new delegation contracts and registration of new users.\n\n    noticeboard_migrate(\n        app_id_new: UInt64,\n    ) -> None:\n        Retires the current platform, preventing creation of new validator ads and modification of existing ones,\n        as well as creation of new delegation contracts and updating of existing ones.\n        Since retired platform cannot create new validator ads or modify existing ones, adding or removing\n        an ASA is not needed anymore.\n\n    noticeboard_set(\n        pla_manager: Account,\n        asset_config_manager: Account,\n        tc_sha256 : Sha256,\n        noticeboard_fees : NoticeboardFees,\n        noticeboard_terms_timing : NoticeboardTermsTiming,\n        noticeboard_terms_node : NoticeboardTermsNodeLimits,\n    ) -> None:\n        Set (anew) all of the platform's operating parameters.\n\n    noticeboard_key_reg(\n        key_reg_info : KeyRegTxnInfo,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Issues a key (de)registration transaction by the platform.\n\n    noticeboard_optin_asa(\n        asa : Asset,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Opts the platform address in to an ASA.\n\n    noticeboard_config_asset(\n        asset_id : UInt64,\n        asset_info : NoticeboardAssetInfo,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Adds or modifies an asset from the accepted payment methods.\n\n    noticeboard_income(\n        asset_id : UInt64,\n    ) -> None:\n        Sends all platform earnings of asset to platform manager account.\n\n    template_load_init(\n        name: arc4.Byte,\n        template_size: UInt64,\n    ) -> None:\n        Starts the process of uploading a contract template.\n\n    template_load_data(\n        name: arc4.Byte,\n        offset: UInt64,\n        data: Bytes,\n    ) -> None:\n        Uploads a data chunk to a contract template.\n\n    partner_config(\n        partner_address: arc4.Address,\n        partner_commissions: UInt64,\n        partner_delete: arc4.Bool,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Creates or modifies a platform's partner.\n\n    gas(\n    ) -> None:\n        To fit more resources in app reference arrays.\n\n    user_create(\n        user_role : UInt64,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Creates a new user data structure for the sender depending on the requested user role.\n\n    user_delete(\n    ) -> None:\n        Clears the user's existing role on noticeboard.\n\n    contract_create(\n        del_beneficiary: arc4.Address,\n        rounds_duration: UInt64,\n        stake_max: UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        del_app_idx: UInt64,\n        tc_sha256: Sha256,\n        partner_address: arc4.Address,\n        mbr_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> arc4.UInt64:\n\n    keys_confirm(\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.\n\n    keys_not_confirmed(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Anyone confirms that delegator manager has not confirmed the confirmation of\n        the keys by the delegator beneficiary and failed to pay the operational fee\n        in the agreed time.\n\n    keys_not_submitted(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Anyone confirms that validator manager has not submitted the keys in the agreed time.\n\n    keys_submit(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> None:\n        Validator manager submits the keys generated for the delegator beneficiary.\n\n    breach_limits(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a limit breach event occurred on a delegator contract of a validator ad.\n\n    breach_pay(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a payment cannot be made because the payment asset on a delegator contract\n        have been either frozen or clawed back.\n\n    breach_suspended(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> EarningsDistribution:\n        Claims the operational fee up to this round from a delegator contract and\n        transfers it to the validator ad as well as the commission to the platform.\n\n    contract_expired(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a delegator contract has expired.\n\n    contract_withdraw(\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Delegator manager gracefully withdraws from the delegator contract prematurely.\n\n    contract_delete(\n        del_app: Application,\n        del_app_idx : UInt64,\n    ) -> ContractDeleteReturn:\n        Deletes a delegator contract.\n\n    contract_report_expiry_soon(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n    ) -> None:\n        Reports that the contract will expire soon.\n\n    ad_create(\n        val_app_idx: UInt64,\n        txn: gtxn.PaymentTransaction,\n    ) -> arc4.UInt64:\n        Creates a new validator ad for the sender (i.e. validator owner).\n\n    ad_config(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        val_manager: arc4.Address,\n        live : arc4.Bool,\n        cnt_del_max : UInt64,\n    ) -> None:\n        Sets all operation configuration parameters for the validator ad\n\n    ad_delete(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Validator owner deletes a validator ad.\n\n    ad_ready(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        ready: arc4.Bool,\n    ) -> None:\n        Ad manager sets its readiness for operation.\n\n    ad_self_disclose(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        val_info: ValidatorSelfDisclosure,\n    ) -> None:\n        Ad owner sets its self-disclosure information.\n\n    ad_terms(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        tc_sha256: Sha256,\n        terms_time: ValidatorTermsTiming,\n        terms_price: ValidatorTermsPricing,\n        terms_stake: ValidatorTermsStakeLimits,\n        terms_reqs: ValidatorTermsGating,\n        terms_warn: ValidatorTermsWarnings,\n        mbr_delegator_template_box: UInt64,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Sets all the terms for creating a delegation contract.\n\n    ad_income(\n        val_app: Application,\n        val_app_idx: UInt64,\n        asset_id: UInt64,\n    ) -> arc4.UInt64:\n        Validator owner withdraws all available balance from the validator ad for the given asset.\n\n    ad_asa_close(\n        val_app: Application,\n        val_app_idx: UInt64,\n        asset_id: UInt64,\n    ) -> None:\n        Removes the asset's storage on the validator ad.\n\n    get_noticeboard_asset(\n        asset_id : UInt64,\n    ) -> NoticeboardAssetInfo:\n        Returns information about the payment asset that is or was accepted on the platform.\n\n    get_noticeboard_user(\n        user : arc4.Address,\n    ) -> UserInfo:\n        Returns information about the user on the platform.\n\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 9
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "pla_manager": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cGxhX21hbmFnZXI="
                },
                "asset_config_manager": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YXNzZXRfY29uZmlnX21hbmFnZXI="
                },
                "tc_sha256": {
                    "keyType": "AVMString",
                    "valueType": "byte[32]",
                    "key": "dGNfc2hhMjU2"
                },
                "noticeboard_fees": {
                    "keyType": "AVMString",
                    "valueType": "NoticeboardFees",
                    "key": "bm90aWNlYm9hcmRfZmVlcw=="
                },
                "noticeboard_terms_timing": {
                    "keyType": "AVMString",
                    "valueType": "NoticeboardTermsTiming",
                    "key": "bm90aWNlYm9hcmRfdGVybXNfdGltaW5n"
                },
                "noticeboard_terms_node": {
                    "keyType": "AVMString",
                    "valueType": "NoticeboardTermsNodeLimits",
                    "key": "bm90aWNlYm9hcmRfdGVybXNfbm9kZQ=="
                },
                "state": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c3RhdGU="
                },
                "app_id_old": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXBwX2lkX29sZA=="
                },
                "app_id_new": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXBwX2lkX25ldw=="
                },
                "dll_val": {
                    "keyType": "AVMBytes",
                    "valueType": "UsersDoubleLinkedList",
                    "key": "ZGxsX192YWw="
                },
                "dll_del": {
                    "keyType": "AVMBytes",
                    "valueType": "UsersDoubleLinkedList",
                    "key": "ZGxsX19kZWw="
                }
            },
            "local": {},
            "box": {
                "template_del": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "ZA=="
                },
                "template_val": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "dg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "users": {
                    "keyType": "address",
                    "valueType": "UserInfo",
                    "prefix": ""
                },
                "assets": {
                    "keyType": "AVMUint64",
                    "valueType": "NoticeboardAssetInfo",
                    "prefix": "YXNzZXRf"
                },
                "partners": {
                    "keyType": "address",
                    "valueType": "PartnerCommissions",
                    "prefix": "cGFydG5lcl8="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        3014,
                        4055,
                        4486,
                        4616,
                        4724,
                        4808,
                        4884,
                        4960,
                        5036,
                        5112,
                        5177,
                        5312,
                        5413
                    ],
                    "errorMessage": "ARC4 prefix is valid"
                },
                {
                    "pc": [
                        3941
                    ],
                    "errorMessage": "Ad fee_round_min must be larger than the minimum on the platform."
                },
                {
                    "pc": [
                        3953
                    ],
                    "errorMessage": "Ad fee_round_var duration must be larger than the minimum on the platform."
                },
                {
                    "pc": [
                        3964
                    ],
                    "errorMessage": "Ad fee_setup must be larger than the minimum on the platform."
                },
                {
                    "pc": [
                        3872
                    ],
                    "errorMessage": "Ad maximum accepted duration must be smaller than the maximum on the platform."
                },
                {
                    "pc": [
                        3857
                    ],
                    "errorMessage": "Ad minimum accepted duration must be larger than the minimum on the platform."
                },
                {
                    "pc": [
                        3997
                    ],
                    "errorMessage": "Ad stake_max must be larger than the minimum on the platform."
                },
                {
                    "pc": [
                        3987
                    ],
                    "errorMessage": "Ad stake_max must be smaller than the maximum on the platform."
                },
                {
                    "pc": [
                        3569
                    ],
                    "errorMessage": "App does not have state."
                },
                {
                    "pc": [
                        2004,
                        2074
                    ],
                    "errorMessage": "Can only be called by platform manager or asset config manager."
                },
                {
                    "pc": [
                        1738,
                        1781,
                        1827
                    ],
                    "errorMessage": "Can only be called by platform manager or creator."
                },
                {
                    "pc": [
                        1907,
                        2149,
                        2227,
                        2276,
                        2327
                    ],
                    "errorMessage": "Can only be called by platform manager."
                },
                {
                    "pc": [
                        2234,
                        2283
                    ],
                    "errorMessage": "Cannot be called from other state than DEPLOYED."
                },
                {
                    "pc": [
                        1713,
                        2403,
                        2891,
                        3470,
                        3523,
                        4117
                    ],
                    "errorMessage": "Cannot be called from other state than SET."
                },
                {
                    "pc": [
                        1756
                    ],
                    "errorMessage": "Cannot be called from other state than SUSPENDED."
                },
                {
                    "pc": [
                        1802,
                        2082,
                        2335
                    ],
                    "errorMessage": "Cannot be called from state RETIRED."
                },
                {
                    "pc": [
                        3362
                    ],
                    "errorMessage": "Cannot remove app from the index because it does not match."
                },
                {
                    "pc": [
                        3106
                    ],
                    "errorMessage": "Cannot store app on the index because it is taken."
                },
                {
                    "pc": [
                        3079
                    ],
                    "errorMessage": "During ad creation, incorrect amount of ALGO was paid."
                },
                {
                    "pc": [
                        2386
                    ],
                    "errorMessage": "Error while deleting partner box."
                },
                {
                    "pc": [
                        2857
                    ],
                    "errorMessage": "Failed to delete user box."
                },
                {
                    "pc": [
                        2376
                    ],
                    "errorMessage": "Fee for MBR increase for creating partner on platform was not paid."
                },
                {
                    "pc": [
                        2136
                    ],
                    "errorMessage": "Increase for the MBR was not paid."
                },
                {
                    "pc": [
                        3122,
                        3380
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        566,
                        587,
                        599,
                        615,
                        651,
                        676,
                        704,
                        733,
                        749,
                        768,
                        793,
                        824,
                        833,
                        858,
                        870,
                        900,
                        932,
                        954,
                        982,
                        1007,
                        1061,
                        1091,
                        1117,
                        1182,
                        1217,
                        1255,
                        1293,
                        1334,
                        1372,
                        1410,
                        1448,
                        1490,
                        1528,
                        1563,
                        1602,
                        1640,
                        1660
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2104
                    ],
                    "errorMessage": "Platform is not opted into the ASA."
                },
                {
                    "pc": [
                        3257
                    ],
                    "errorMessage": "Requested app is not under the given user."
                },
                {
                    "pc": [
                        3189
                    ],
                    "errorMessage": "Requested number of maximum delegator is unsafe for node performance."
                },
                {
                    "pc": [
                        2451
                    ],
                    "errorMessage": "Requested user role does not exist."
                },
                {
                    "pc": [
                        2020
                    ],
                    "errorMessage": "Sent amount doesn't match the MBR increase for opting into an ASA."
                },
                {
                    "pc": [
                        3543,
                        4148
                    ],
                    "errorMessage": "Terms and conditions do not match the ones defined by the platform."
                },
                {
                    "pc": [
                        1885
                    ],
                    "errorMessage": "There can be at least one delegator."
                },
                {
                    "pc": [
                        1915,
                        2012,
                        2127,
                        2368,
                        2628,
                        3053,
                        3767,
                        4169,
                        4206,
                        4254
                    ],
                    "errorMessage": "Transaction must be to this contract."
                },
                {
                    "pc": [
                        4246
                    ],
                    "errorMessage": "Transaction type must be either Payment or AssetTransfer."
                },
                {
                    "pc": [
                        2257,
                        2307
                    ],
                    "errorMessage": "Unexpected name for box for a contract template."
                },
                {
                    "pc": [
                        2416
                    ],
                    "errorMessage": "User already exists on the platform."
                },
                {
                    "pc": [
                        2640
                    ],
                    "errorMessage": "User did not pay for the increase in MBR and user registration fee."
                },
                {
                    "pc": [
                        3237
                    ],
                    "errorMessage": "User does not have the expected role on the platform."
                },
                {
                    "pc": [
                        2679
                    ],
                    "errorMessage": "User has one or more active smart contracts."
                },
                {
                    "pc": [
                        4129
                    ],
                    "errorMessage": "User is not a registered delegator on the platform."
                },
                {
                    "pc": [
                        2902
                    ],
                    "errorMessage": "User is not registered as validator on the platform."
                },
                {
                    "pc": [
                        3903
                    ],
                    "errorMessage": "Validator ad commission must be at least the amount defined at the platform."
                },
                {
                    "pc": [
                        1859,
                        3891
                    ],
                    "errorMessage": "Validator ad commission must be smaller or equal to the maximum possible platform commission."
                },
                {
                    "pc": [
                        4161
                    ],
                    "errorMessage": "Validator ad does not comply with platform's terms and conditions."
                },
                {
                    "pc": [
                        1881
                    ],
                    "errorMessage": "Validator ad does not have enough memory to store that many active delegators."
                },
                {
                    "pc": [
                        3929
                    ],
                    "errorMessage": "Validator ad payment asset must be allowed by the platform."
                },
                {
                    "pc": [
                        2090,
                        2119,
                        2191,
                        2196,
                        2347,
                        2360,
                        2408,
                        2620,
                        2649,
                        2862,
                        2907,
                        3058,
                        3277,
                        3321
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        2161
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        3032,
                        3579,
                        3772,
                        4174,
                        4214,
                        4272
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        570
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        590,
                        602,
                        618,
                        654,
                        679,
                        707,
                        736,
                        752,
                        771,
                        796,
                        827,
                        836,
                        861,
                        873,
                        903,
                        935,
                        957,
                        985,
                        1010,
                        1064,
                        1094,
                        1120,
                        1185,
                        1220,
                        1258,
                        1296,
                        1337,
                        1375,
                        1413,
                        1451,
                        1493,
                        1531,
                        1566,
                        1605,
                        1643,
                        1663
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2475,
                        2497,
                        2513,
                        2529,
                        2544,
                        2568,
                        2580,
                        2707,
                        2720,
                        2744,
                        2782,
                        2836,
                        2848
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        1994,
                        2064
                    ],
                    "errorMessage": "check self.asset_config_manager exists"
                },
                {
                    "pc": [
                        3916,
                        5437
                    ],
                    "errorMessage": "check self.assets entry exists"
                },
                {
                    "pc": [
                        2428,
                        2456,
                        3063,
                        3896,
                        4183
                    ],
                    "errorMessage": "check self.noticeboard_fees exists"
                },
                {
                    "pc": [
                        3178,
                        3980,
                        3992
                    ],
                    "errorMessage": "check self.noticeboard_terms_node exists"
                },
                {
                    "pc": [
                        3852,
                        3867,
                        5354,
                        5364
                    ],
                    "errorMessage": "check self.noticeboard_terms_timing exists"
                },
                {
                    "pc": [
                        4313
                    ],
                    "errorMessage": "check self.partners entry exists"
                },
                {
                    "pc": [
                        1720,
                        1763,
                        1809,
                        1905,
                        1983,
                        2053,
                        2147,
                        2167,
                        2203,
                        2225,
                        2274,
                        2325
                    ],
                    "errorMessage": "check self.pla_manager exists"
                },
                {
                    "pc": [
                        1709,
                        1751,
                        1798,
                        2078,
                        2231,
                        2280,
                        2331,
                        2399,
                        2887,
                        3466,
                        3519,
                        4113
                    ],
                    "errorMessage": "check self.state exists"
                },
                {
                    "pc": [
                        3539,
                        4144,
                        4159
                    ],
                    "errorMessage": "check self.tc_sha256 exists"
                },
                {
                    "pc": [
                        3597,
                        3627,
                        3666
                    ],
                    "errorMessage": "check self.template_del exists"
                },
                {
                    "pc": [
                        2911,
                        2929,
                        2946
                    ],
                    "errorMessage": "check self.template_val exists"
                },
                {
                    "pc": [
                        2556,
                        2655,
                        2664,
                        2672,
                        2681,
                        2758,
                        2796,
                        2809,
                        2823,
                        2896,
                        3089,
                        3110,
                        3137,
                        3149,
                        3230,
                        3241,
                        3342,
                        3368,
                        3395,
                        3407,
                        4122,
                        5445
                    ],
                    "errorMessage": "check self.users entry exists"
                },
                {
                    "pc": [
                        667,
                        695,
                        724,
                        815,
                        849,
                        887,
                        1052,
                        1165
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCgpzbWFydF9jb250cmFjdHMubm90aWNlYm9hcmQuY29udHJhY3QuTm90aWNlYm9hcmQuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}