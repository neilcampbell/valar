{
    "name": "DelegatorContract",
    "structs": {
        "BreachLimitsReturn": [
            {
                "name": "max_breach_reached",
                "type": "bool"
            },
            {
                "name": "earnings_distribution",
                "type": "EarningsDistribution"
            },
            {
                "name": "del_manager",
                "type": "address"
            },
            {
                "name": "msg",
                "type": "byte[100]"
            }
        ],
        "ContractDeleteReturn": [
            {
                "name": "remaining_balance",
                "type": "uint64"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            }
        ],
        "DelegationTermsBalance": [
            {
                "name": "stake_max",
                "type": "uint64"
            },
            {
                "name": "cnt_breach_del_max",
                "type": "uint64"
            },
            {
                "name": "rounds_breach",
                "type": "uint64"
            },
            {
                "name": "gating_asa_list",
                "type": "(uint64,uint64)[2]"
            }
        ],
        "DelegationTermsGeneral": [
            {
                "name": "commission",
                "type": "uint64"
            },
            {
                "name": "fee_round",
                "type": "uint64"
            },
            {
                "name": "fee_setup",
                "type": "uint64"
            },
            {
                "name": "fee_asset_id",
                "type": "uint64"
            },
            {
                "name": "partner_address",
                "type": "address"
            },
            {
                "name": "fee_round_partner",
                "type": "uint64"
            },
            {
                "name": "fee_setup_partner",
                "type": "uint64"
            },
            {
                "name": "rounds_setup",
                "type": "uint64"
            },
            {
                "name": "rounds_confirm",
                "type": "uint64"
            }
        ],
        "EarningsDistribution": [
            {
                "name": "user",
                "type": "uint64"
            },
            {
                "name": "platform",
                "type": "uint64"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            }
        ],
        "EarningsDistributionAndMessage": [
            {
                "name": "earnings_distribution",
                "type": "EarningsDistribution"
            },
            {
                "name": "del_manager",
                "type": "address"
            },
            {
                "name": "msg",
                "type": "byte[100]"
            }
        ],
        "KeyRegTxnInfo": [
            {
                "name": "vote_first",
                "type": "uint64"
            },
            {
                "name": "vote_last",
                "type": "uint64"
            },
            {
                "name": "vote_key_dilution",
                "type": "uint64"
            },
            {
                "name": "vote_pk",
                "type": "byte[32]"
            },
            {
                "name": "selection_pk",
                "type": "byte[32]"
            },
            {
                "name": "state_proof_pk",
                "type": "byte[64]"
            },
            {
                "name": "sender",
                "type": "address"
            }
        ],
        "Message": [
            {
                "name": "del_manager",
                "type": "address"
            },
            {
                "name": "msg",
                "type": "byte[100]"
            }
        ]
    },
    "methods": [
        {
            "name": "contract_create",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                },
                {
                    "type": "address",
                    "name": "del_beneficiary",
                    "desc": "Beneficiary address for the delegation contract."
                },
                {
                    "type": "uint64",
                    "name": "noticeboard_app_id",
                    "desc": "App ID of the Noticeboard smart contract to which to tie this contract."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "App ID of the created delegation contract application."
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Creates a new DelegatorContract.\nDefines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_setup",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "tc_sha256",
                    "desc": "Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator."
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
                    "struct": "DelegationTermsGeneral",
                    "name": "delegation_terms_general",
                    "desc": "General delegation contract terms."
                },
                {
                    "type": "(uint64,uint64,uint64,(uint64,uint64)[2])",
                    "struct": "DelegationTermsBalance",
                    "name": "delegation_terms_balance",
                    "desc": "Balance delegation contract terms."
                },
                {
                    "type": "uint64",
                    "name": "rounds_duration",
                    "desc": "Contract duration in number of rounds."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the general and balance delegation contract terms.\nDefines contract start and end rounds. Opts in the payment asset if it is not ALGO.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_pay",
            "args": [
                {
                    "type": "txn",
                    "name": "txn",
                    "desc": "Transaction for the payment of the setup and operational fees."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pays the validator setup and operational fee.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_confirm",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Purported delegator manager account."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_not_confirmed",
            "args": [],
            "returns": {
                "type": "(address,byte[100])",
                "struct": "Message",
                "desc": "Address of delegator manager."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that keys have not been confirmed in time.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_not_submitted",
            "args": [],
            "returns": {
                "type": "(address,byte[100])",
                "struct": "Message",
                "desc": "Address of delegator manager."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that keys have not been submitted in time.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keys_submit",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                    "struct": "KeyRegTxnInfo",
                    "name": "key_reg_txn_info",
                    "desc": "Information about the generated participation keys."
                }
            ],
            "returns": {
                "type": "((uint64,uint64,uint64),address,byte[100])",
                "struct": "EarningsDistributionAndMessage",
                "desc": "Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_limits",
            "args": [],
            "returns": {
                "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
                "struct": "BreachLimitsReturn",
                "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a limit breach event occurred.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_pay",
            "args": [],
            "returns": {
                "type": "(address,byte[100])",
                "struct": "Message",
                "desc": "Address of delegator manager."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a payment for the fee cannot be made from DelegatorContract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "breach_suspended",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,uint64),address,byte[100])",
                "struct": "EarningsDistributionAndMessage",
                "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that the delegator beneficiary was suspended by consensus.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_claim",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "EarningsDistribution",
                "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claims operational fee of validator up to this round.\nCommission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_expired",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,uint64),address,byte[100])",
                "struct": "EarningsDistributionAndMessage",
                "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that a contract has expired.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_withdraw",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "EarningsDistribution",
                "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delegator gracefully withdraws from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_delete",
            "args": [
                {
                    "type": "address",
                    "name": "del_manager",
                    "desc": "Manager address for the delegation contract."
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "ContractDeleteReturn",
                "desc": "Balance of the fee asset that remained in the contract."
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "desc": "Delegator deletes an ended contract and withdraws any remaining balance.\nThere can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contract_report_expiry_soon",
            "args": [
                {
                    "type": "uint64",
                    "name": "before_expiry",
                    "desc": "How many rounds before contract end can the report be made."
                },
                {
                    "type": "uint64",
                    "name": "report_period",
                    "desc": "How frequently can the report be made."
                }
            ],
            "returns": {
                "type": "(address,byte[100])",
                "struct": "Message",
                "desc": "Address of delegator manager."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reports that the contract will expire soon.\nNotification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Contract between a delegator manager and a validator (a.k.a. node runner), for the latter to participate in\n    consensus on the behalf of the delegator beneficiary for specific amount of time and for a specific fee.\n    The contract terms and conditions are defined in this contract.\n    The contract also acts as an escrow account for the delegator's payment to the validator for the service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n    validator_ad_app_id : UInt64\n        App ID of validator ad to which this contract belongs to.\n\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms agreed by delegator and validator to govern this contract.\n    fee_operational : UInt64\n        Calculated operational fee based on the agreed contract terms.\n    fee_operational_partner : UInt64\n        Calculated operational fee charged for convenience by the partner.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance agreed by delegator and validator to govern this contract.\n\n    del_manager : Account\n        Delegator manager account.\n    del_beneficiary : UInt64\n        Delegator beneficiary account.\n\n    round_start : UInt64\n        Agreed start round of the contract, i.e. time of its creation.\n    round_end : UInt64\n        Agreed end round of the contract.\n    round_ended : UInt64\n        Actual round at which the contract ended.\n        Can be smaller than round_end in case of early contract end.\n\n    vote_key_dilution : UInt64\n        Vote key dilution parameter of the agreed participation key.\n    vote_pk = VotePk\n        Vote public key of the agreed participation key.\n    selection_pk : SelPk\n        Selection public key of the agreed participation key.\n    state_proof_pk = StateProofPk\n        State proof public key of the agreed participation key.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n            READY - waiting for keys submission.\n            SET - contract terms have been set.\n            SUBMITTED - waiting for keys confirmation.\n            ENDED_NOT_SUBMITTED - keys have not been submitted in time.\n            ENDED_NOT_CONFIRMED - keys have not been confirmed in time.\n            ENDED_LIMITS - maximum number of limit breach events has been reached.\n            ENDED_WITHDREW - delegator withdrew from the contract prematurely.\n            ENDED_EXPIRED - contract has expired.\n            ENDED_SUSPENDED - delegator has been suspended by consensus.\n            ENDED_CANNOT_PAY - delegator cannot pay the validator (as funds could have been frozen and/or clawed back).\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator\n        and validator.\n\n    cnt_breach_del : UInt64\n        Counter of limit breach events.\n    round_breach_last : UInt64\n        Number of round of last limit breach event.\n\n    round_claim_last : UInt64\n        Number of the round the operational fee was last claimed.\n\n    round_expiry_soon_last : UInt64\n        Number of the round it was last reported that the contract will expire soon.\n\n    Methods\n    -------\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        noticeboard_app_id: UInt64,\n    ) -> Application:\n        Creates a new delegator contract and returns its app ID.\n\n    contract_setup(\n        delegation_terms_general: DelegationTermsGeneral,\n        delegation_terms_balance: DelegationTermsBalance,\n        rounds_duration: UInt64,\n    ) -> None:\n        Sets the delegation contract terms.\n\n    contract_pay(\n        txn: gtxn.Transaction,\n    ) -> None:\n        Pays the validator setup and operational fee.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n    ) -> None:\n        Delegator confirms the participation keys.\n\n    keys_not_confirmed() -> Message:\n        Reports that keys have not been confirmed in time.\n\n    keys_not_submitted() -> Message:\n        Reports that keys have not been submitted in time.\n\n    keys_submit(\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> EarningsDistributionAndMessage:\n        ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred.\n\n    breach_pay(\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from DelegatorContract (due to freeze or claw back).\n\n    breach_suspended(\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard,\n        as well as to the partner.\n\n    contract_expired(\n    ) -> EarningsDistributionAndMessage:\n        Reports that a contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n    ) -> EarningsDistribution:\n        Delegator gracefully withdraws from the contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        updating : arc4.Bool,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract and withdraws any remaining balance.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    Private methods\n    ---------------\n    _distribute_earnings(\n        amount: UInt64,\n        amount_partner: UInt64,\n    ) -> EarningsDistribution:\n        Internal method for distributing the earnings between the validator ad and the noticeboard platform,\n        as well as for distributing the earnings of the partner.\n\n    _is_eligible(\n    ) -> arc4.Bool:\n        Check if del_beneficiary meets the agreed balance limits or not\n\n    _try_return_fee(\n        fee_asset: Asset,\n        amt_return: UInt64,\n    ) -> None:\n        Tries to return the input fee amount of given asset to del_manager.\n        The fee cannot be returned if the del_manager is closed out or frozen for the given asset.\n\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 12,
                "bytes": 9
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "noticeboard_app_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bm90aWNlYm9hcmRfYXBwX2lk"
                },
                "validator_ad_app_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dmFsaWRhdG9yX2FkX2FwcF9pZA=="
                },
                "delegation_terms_general": {
                    "keyType": "AVMString",
                    "valueType": "DelegationTermsGeneral",
                    "key": "Rw==",
                    "desc": "General delegation terms."
                },
                "fee_operational": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmVlX29wZXJhdGlvbmFs"
                },
                "fee_operational_partner": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmVlX29wZXJhdGlvbmFsX3BhcnRuZXI="
                },
                "delegation_terms_balance": {
                    "keyType": "AVMString",
                    "valueType": "DelegationTermsBalance",
                    "key": "Qg==",
                    "desc": "Balance related delegation terms."
                },
                "del_manager": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZGVsX21hbmFnZXI="
                },
                "del_beneficiary": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZGVsX2JlbmVmaWNpYXJ5"
                },
                "round_start": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfc3RhcnQ="
                },
                "round_end": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfZW5k"
                },
                "round_ended": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfZW5kZWQ="
                },
                "vote_key_dilution": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZV9rZXlfZGlsdXRpb24="
                },
                "sel_key": {
                    "keyType": "AVMString",
                    "valueType": "byte[32]",
                    "key": "c2VsX2tleQ=="
                },
                "vote_key": {
                    "keyType": "AVMString",
                    "valueType": "byte[32]",
                    "key": "dm90ZV9rZXk="
                },
                "state_proof_key": {
                    "keyType": "AVMString",
                    "valueType": "byte[64]",
                    "key": "c3RhdGVfcHJvb2Zfa2V5"
                },
                "state": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c3RhdGU="
                },
                "tc_sha256": {
                    "keyType": "AVMString",
                    "valueType": "byte[32]",
                    "key": "dGNfc2hhMjU2"
                },
                "cnt_breach_del": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y250X2JyZWFjaF9kZWw="
                },
                "round_breach_last": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfYnJlYWNoX2xhc3Q="
                },
                "round_claim_last": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfY2xhaW1fbGFzdA=="
                },
                "round_expiry_soon_last": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRfZXhwaXJ5X3Nvb25fbGFzdA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2980
                    ],
                    "errorMessage": "ALGO cannot be frozen or clawed back."
                },
                {
                    "pc": [
                        3334
                    ],
                    "errorMessage": "Account is still participating in consensus."
                },
                {
                    "pc": [
                        1353,
                        3628,
                        3678
                    ],
                    "errorMessage": "Can only be approved by delegator manager."
                },
                {
                    "pc": [
                        875,
                        1034,
                        1337,
                        1412,
                        1699,
                        1891,
                        2507,
                        2837,
                        2933,
                        3308,
                        3465,
                        3612,
                        3659,
                        3800
                    ],
                    "errorMessage": "Can only be called by smart contract creator."
                },
                {
                    "pc": [
                        884
                    ],
                    "errorMessage": "Cannot be called from other state than CREATED."
                },
                {
                    "pc": [
                        3670
                    ],
                    "errorMessage": "Cannot be called from other state than ENDED_xyz."
                },
                {
                    "pc": [
                        2969
                    ],
                    "errorMessage": "Cannot be called from other state than LIVE or SUBMITTED or READY."
                },
                {
                    "pc": [
                        2515,
                        2845,
                        3316,
                        3473,
                        3620,
                        3808
                    ],
                    "errorMessage": "Cannot be called from other state than LIVE."
                },
                {
                    "pc": [
                        1707,
                        1899
                    ],
                    "errorMessage": "Cannot be called from other state than READY."
                },
                {
                    "pc": [
                        1043
                    ],
                    "errorMessage": "Cannot be called from other state than SET."
                },
                {
                    "pc": [
                        1345,
                        1420
                    ],
                    "errorMessage": "Cannot be called from other state than SUBMITTED."
                },
                {
                    "pc": [
                        2523,
                        3324,
                        3636,
                        3827
                    ],
                    "errorMessage": "Cannot be called when the contract has already expired."
                },
                {
                    "pc": [
                        3481
                    ],
                    "errorMessage": "Cannot be called when the contract has not yet expired."
                },
                {
                    "pc": [
                        3179
                    ],
                    "errorMessage": "Contract has sufficient funds to pay the earned operational fee."
                },
                {
                    "pc": [
                        3109
                    ],
                    "errorMessage": "Contract has sufficient funds to pay the full operational fee."
                },
                {
                    "pc": [
                        3076
                    ],
                    "errorMessage": "Contract has sufficient funds to pay the setup and operational fee."
                },
                {
                    "pc": [
                        1151
                    ],
                    "errorMessage": "Delegator beneficiary is not eligible according to the agreed limits."
                },
                {
                    "pc": [
                        2549
                    ],
                    "errorMessage": "Delegator beneficiary is still eligible according to the agreed limits."
                },
                {
                    "pc": [
                        2382
                    ],
                    "errorMessage": "Earnings cannot be paid because DelegatorContract has insufficient ALGO."
                },
                {
                    "pc": [
                        2196
                    ],
                    "errorMessage": "Earnings cannot be paid because DelegatorContract has insufficient amount."
                },
                {
                    "pc": [
                        2205
                    ],
                    "errorMessage": "Earnings cannot be paid because DelegatorContract has the asset frozen."
                },
                {
                    "pc": [
                        3839
                    ],
                    "errorMessage": "It is too soon to report again that the contract is about to expire."
                },
                {
                    "pc": [
                        3819
                    ],
                    "errorMessage": "It is too soon to report the contract is about to expire."
                },
                {
                    "pc": [
                        1911
                    ],
                    "errorMessage": "Key beneficiary does not match."
                },
                {
                    "pc": [
                        1380
                    ],
                    "errorMessage": "Key confirmation was done too late."
                },
                {
                    "pc": [
                        1991
                    ],
                    "errorMessage": "Key submission was done too late."
                },
                {
                    "pc": [
                        1389
                    ],
                    "errorMessage": "Must opt-in to consensus suspension tracking."
                },
                {
                    "pc": [
                        2542
                    ],
                    "errorMessage": "Not enough rounds have passed since last limit breach event."
                },
                {
                    "pc": [
                        792
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        547,
                        575,
                        600,
                        616,
                        631,
                        648,
                        665,
                        685,
                        702,
                        719,
                        736,
                        753,
                        770,
                        812
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2854
                    ],
                    "errorMessage": "Operational fee has already been claimed up to this round."
                },
                {
                    "pc": [
                        1447
                    ],
                    "errorMessage": "Report keys as not confirmed can be done only after enough rounds have passed."
                },
                {
                    "pc": [
                        1725
                    ],
                    "errorMessage": "Report keys as not submitted can be done only after enough rounds have passed."
                },
                {
                    "pc": [
                        1109,
                        1145
                    ],
                    "errorMessage": "Sent amount doesn't match the agreed one."
                },
                {
                    "pc": [
                        1103,
                        1139
                    ],
                    "errorMessage": "Sent asset doesn't match the agreed one."
                },
                {
                    "pc": [
                        1092,
                        1125
                    ],
                    "errorMessage": "Transaction must be to this contract."
                },
                {
                    "pc": [
                        1117
                    ],
                    "errorMessage": "Transaction type must be either Payment or AssetTransfer."
                },
                {
                    "pc": [
                        1924
                    ],
                    "errorMessage": "Vote first round does not match contract start."
                },
                {
                    "pc": [
                        1936
                    ],
                    "errorMessage": "Vote last round does not match contract end."
                },
                {
                    "pc": [
                        1173,
                        2369,
                        2374,
                        3695,
                        3700
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1270,
                        1617,
                        1629,
                        2189,
                        2203,
                        2228,
                        2282,
                        2338,
                        3037,
                        3074,
                        3107,
                        3177,
                        3737
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        2210,
                        2223,
                        2237,
                        2263,
                        2277,
                        2291,
                        2388,
                        2414
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        551
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        578,
                        603,
                        619,
                        634,
                        651,
                        668,
                        688,
                        705,
                        722,
                        739,
                        756,
                        773,
                        795,
                        815
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2554,
                        2684
                    ],
                    "errorMessage": "check self.cnt_breach_del exists"
                },
                {
                    "pc": [
                        1170,
                        1248,
                        1262,
                        1385,
                        1909,
                        3329
                    ],
                    "errorMessage": "check self.del_beneficiary exists"
                },
                {
                    "pc": [
                        1349,
                        1483,
                        1599,
                        1612,
                        1624,
                        1640,
                        1664,
                        1676,
                        1778,
                        2018,
                        2816,
                        3193,
                        3351,
                        3498,
                        3624,
                        3674,
                        3707,
                        3742,
                        3746,
                        3766,
                        3770,
                        3848
                    ],
                    "errorMessage": "check self.del_manager exists"
                },
                {
                    "pc": [
                        1178,
                        1201,
                        2533,
                        2676
                    ],
                    "errorMessage": "check self.delegation_terms_balance exists"
                },
                {
                    "pc": [
                        927,
                        951,
                        1047,
                        1061,
                        1096,
                        1129,
                        1364,
                        1373,
                        1431,
                        1440,
                        1451,
                        1718,
                        1729,
                        1737,
                        1751,
                        1984,
                        1995,
                        2003,
                        2130,
                        2155,
                        2163,
                        2877,
                        2896,
                        2973,
                        2984,
                        2994,
                        3004,
                        3014,
                        3024,
                        3682
                    ],
                    "errorMessage": "check self.delegation_terms_general exists"
                },
                {
                    "pc": [
                        1056,
                        1460,
                        1746,
                        3055,
                        3094
                    ],
                    "errorMessage": "check self.fee_operational exists"
                },
                {
                    "pc": [
                        1070,
                        1465,
                        1760,
                        3063,
                        3099
                    ],
                    "errorMessage": "check self.fee_operational_partner exists"
                },
                {
                    "pc": [
                        2151
                    ],
                    "errorMessage": "check self.noticeboard_app_id exists"
                },
                {
                    "pc": [
                        2528
                    ],
                    "errorMessage": "check self.round_breach_last exists"
                },
                {
                    "pc": [
                        2850,
                        2886,
                        2905,
                        3146,
                        3160
                    ],
                    "errorMessage": "check self.round_claim_last exists"
                },
                {
                    "pc": [
                        935,
                        959,
                        1933,
                        2519,
                        2860,
                        2868,
                        3128,
                        3141,
                        3320,
                        3477,
                        3632,
                        3817,
                        3823
                    ],
                    "errorMessage": "check self.round_end exists"
                },
                {
                    "pc": [
                        3834
                    ],
                    "errorMessage": "check self.round_expiry_soon_last exists"
                },
                {
                    "pc": [
                        908,
                        919,
                        940,
                        964,
                        1360,
                        1427,
                        1714,
                        1921,
                        1980
                    ],
                    "errorMessage": "check self.round_start exists"
                },
                {
                    "pc": [
                        879,
                        1038,
                        1341,
                        1416,
                        1703,
                        1895,
                        2511,
                        2841,
                        2937,
                        2947,
                        2957,
                        3044,
                        3083,
                        3116,
                        3312,
                        3469,
                        3616,
                        3663,
                        3804
                    ],
                    "errorMessage": "check self.state exists"
                },
                {
                    "pc": [
                        2143
                    ],
                    "errorMessage": "check self.validator_ad_app_id exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCgpzbWFydF9jb250cmFjdHMuZGVsZWdhdG9yX2NvbnRyYWN0LmNvbnRyYWN0LkRlbGVnYXRvckNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}